/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Query {
  /**
   * The title of query.
   */
  title?: string;
  /**
   * Query name, default is generated base on the file path.
   */
  name: string;
  /**
   * Indicates if the query is public.
   */
  public?: boolean;
  /**
   * Indicates if the query is deprecated
   */
  deprecated?: boolean;
  /**
   * Query description for documentation.
   */
  description?: string;
  /**
   * The SQL template of the query.
   */
  sql?: string;
  /**
   * The path used for API routing, which by default uses the relative path of the config file in the project as the URL path.
   */
  path?: string;
  cache?: Cache;
  prefetch?: Prefetch;
  /**
   * Query parameters.
   */
  parameters: Parameter[];
  result?: Schema;
}
/**
 * Indicates how to implement caching, no caching if not provide.
 */
export interface Cache {
  /**
   * Cache key template.
   */
  key?: string;
  /**
   * Time to live of the cache.
   */
  ttl: number;
  /**
   * The cache feature provider.
   */
  provider?: "NORMAL_TABLE" | "CACHED_TABLE";
  /**
   * Indicates if the query need prefetch in advance.
   */
  needsPrefetch?: boolean;
}
/**
 * Indicates how to implement prefetching, no prefetching if not provide.
 */
export interface Prefetch {
  /**
   * The cron expression to control when to execute the prefetch job.
   */
  cron: string;
  /**
   * The queue that will be execute the prefetch jobs.
   */
  queue?: "MAIN" | "REALTIME" | "CONCURRENT";
}
export interface Parameter {
  /**
   * The parameter name, which will be used as API request parameter's name.
   */
  name: string;
  /**
   * The parameter description, which will be display in the documentation.
   */
  description?: string;
  /**
   * The parameter type.
   */
  type: "boolean" | "number" | "string" | "array";
  /**
   * The default value of parameter.
   */
  defaultValue?: string | number | boolean | unknown[];
  option?: ParameterOption;
  /**
   * The placeholder of the parameter in the template SQL, it will be replaced
   */
  placeholder?: string;
}
/**
 * The option definition of parameter.
 */
export interface ParameterOption {
  /**
   * Get parameter values from the results of the SQL.
   */
  sql?: string;
  /**
   * Get options from the results of the Query, which can use the query cache and prefetch feature.
   */
  query?: string;
  /**
   * Get the options by enumerating the list.
   */
  enums?: string[];
  /**
   * Get parameter values through mapping.
   */
  mappings?: {
    [k: string]: unknown;
  };
}
/**
 * Query result.
 */
export interface Schema {
  title?: string;
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: boolean;
  minimum?: number;
  exclusiveMinimum?: boolean;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  maxProperties?: number;
  minProperties?: number;
  /**
   * @minItems 1
   */
  required?: [string, ...string[]];
  /**
   * @minItems 1
   */
  enum?: [unknown, ...unknown[]];
  type?: "array" | "boolean" | "integer" | "number" | "object" | "string";
  not?: Schema1 | Reference;
  allOf?: (Schema1 | Reference)[];
  oneOf?: (Schema1 | Reference)[];
  anyOf?: (Schema1 | Reference)[];
  items?: Schema1 | Reference;
  properties?: {
    [k: string]: Schema1 | Reference;
  };
  additionalProperties?: Schema1 | Reference | boolean;
  description?: string;
  format?: string;
  default?: unknown;
  nullable?: boolean;
  discriminator?: Discriminator;
  readOnly?: boolean;
  writeOnly?: boolean;
  example?: unknown;
  externalDocs?: ExternalDocumentation;
  deprecated?: boolean;
  xml?: XML;
  /**
   * This interface was referenced by `Schema1`'s JSON-Schema definition
   * via the `patternProperty` "^x-".
   *
   * This interface was referenced by `Schema`'s JSON-Schema definition
   * via the `patternProperty` "^x-".
   */
  [k: string]: unknown;
}
export interface Schema1 {
  title?: string;
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: boolean;
  minimum?: number;
  exclusiveMinimum?: boolean;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  maxProperties?: number;
  minProperties?: number;
  /**
   * @minItems 1
   */
  required?: [string, ...string[]];
  /**
   * @minItems 1
   */
  enum?: [unknown, ...unknown[]];
  type?: "array" | "boolean" | "integer" | "number" | "object" | "string";
  not?: Schema1 | Reference;
  allOf?: (Schema1 | Reference)[];
  oneOf?: (Schema1 | Reference)[];
  anyOf?: (Schema1 | Reference)[];
  items?: Schema1 | Reference;
  properties?: {
    [k: string]: Schema1 | Reference;
  };
  additionalProperties?: Schema1 | Reference | boolean;
  description?: string;
  format?: string;
  default?: unknown;
  nullable?: boolean;
  discriminator?: Discriminator;
  readOnly?: boolean;
  writeOnly?: boolean;
  example?: unknown;
  externalDocs?: ExternalDocumentation;
  deprecated?: boolean;
  xml?: XML;
  /**
   * This interface was referenced by `Schema1`'s JSON-Schema definition
   * via the `patternProperty` "^x-".
   *
   * This interface was referenced by `Schema`'s JSON-Schema definition
   * via the `patternProperty` "^x-".
   */
  [k: string]: unknown;
}
export interface Reference {
  /**
   * This interface was referenced by `Reference`'s JSON-Schema definition
   * via the `patternProperty` "^\$ref$".
   */
  [k: string]: string;
}
export interface Discriminator {
  propertyName: string;
  mapping?: {
    [k: string]: string;
  };
  [k: string]: unknown;
}
export interface ExternalDocumentation {
  description?: string;
  url: string;
  /**
   * This interface was referenced by `ExternalDocumentation`'s JSON-Schema definition
   * via the `patternProperty` "^x-".
   */
  [k: string]: unknown;
}
export interface XML {
  name?: string;
  namespace?: string;
  prefix?: string;
  attribute?: boolean;
  wrapped?: boolean;
  /**
   * This interface was referenced by `XML`'s JSON-Schema definition
   * via the `patternProperty` "^x-".
   */
  [k: string]: unknown;
}
